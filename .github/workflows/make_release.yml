# This workflow will build a KivySwiftLink release

name: make release

env:
  recipe: CythonizedMainPy
  path: recipe
  site_files: "cythonized_main"

  site_path: dist/root/python3/lib/python3.11/site-packages
  lib: dist/root/lib

  token: ${{secrets.TOKEN}}

on:

  workflow_dispatch:
    inputs:
      tag:
        description: 'input new release tag'
        required: true
        type: string
      lastest:
        description: 'lastest release?'
        required: false
        type: boolean
        default: false

jobs:
  toolchainBuild:
    #runs-on: macOS-13
    runs-on: self-hosted
    permissions:
        contents: write
    
      
  
    steps:
      # - uses: maxim-lobanov/setup-xcode@v1
      #   with:
      #     xcode-version: '15.0'
        
      - uses: actions/checkout@v4
      
      # - name: setup python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.11' # install the python version needed
      
      # - name: brew installs
      #   run: |
      #     brew tap PythonSwiftLink/tools
      #     brew install swiftpackagegen
      
      # - name: chmod tools
      #   run: |
      #     chmod 755 tools/SwiftPackageGen
      #     chmod 755 tools/PSProject
      
      - name: install kivy-ios
        run: |
          #python3 -m pip install --upgrade pip
          
          #pip3 install https://github.com/kivy/kivy-ios/archive/master.zip
          git clone https://github.com/kivy/kivy-ios
          
          # new kivy recipe patches before building it.
          
          # curl -O https://github.com/kivy/kivy/archive/2.2.1.zip
          # or
          git clone --depth 1 -b 2.2.1 https://github.com/kivy/kivy
          
          ##### open cv fix #####
          
          #cp package_templates/camera_avfoundation_implem.m kivy/kivy/core/camera/camera_avfoundation_implem.m
          ls kivy-ios/kivy_ios/recipes
          ##### apply modified kivy to recipe as "src" #####
          mv kivy kivy-ios/kivy_ios/recipes/kivy/src

          mv ${{env.path}} kivy-ios/kivy_ios/recipes/${{env.recipe}}

      - name: modify kivy recipe
        shell: python
        run: |
          init_path = "kivy-ios/kivy_ios/recipes/kivy/__init__.py"
          with open(init_path, "r") as input_file:
            init = input_file.read()
            init = init.replace("url = \"https://github.com/kivy/kivy/archive/{version}.zip\"", "url = \"src\"")
            print(init)
            with open(init_path, "w") as output_file:
              output_file.write(init)
      
      - name: install modified kivy-ios
        run: |
          pip3 install -e kivy-ios

      #### build phase ####
      
      - name: build hostpython3
        run: toolchain build hostpython3


      # - name: build python3
      #   run: toolchain build python3

      - name: build custom recipe
        run: toolchain build ${{env.recipe}}

      - name: move numpy build
        run: |
          RECIPE=${{env.recipe}}
          mkdir -p output/lib
          mkdir -p output/site-packages

          PY_SITE=${{env.site_path}}
          for FILE in $PY_SITE/*
          do
            SITEFILE=$PY_SITE/$FILE
            if [[ $SITEFILE == ${{env.site_files}}* ]]
            then
              mv -f $PY_SITE/$FILE output/site-packages
            fi
          done
          cd output
          zip -r site-packages.zip site-packages
          rm -rf site-packages

      
      # taking out necessary libraries and zipping them into "output" folder
      - name: repack recipe xcframework
        run: |
          cp -rf dist/xcframework/lib${{env.recipe}}.xcframework output/xcframework/
        

      
      # - name: repack & zip lib/lib.a files
      #   working-directory: output
      #   run: |
      #     PY_LIB=${{env.lib}}
      #     RECIPE=${{env.recipe}}
      #     cp $PY_LIB/lib$RECIPE.a lib/
      #     zip lib.zip lib/*
          

      - name: repack & zip dist_libs
        id: repack_dist
        run: |
          RECIPE=${{env.recipe}}
          # mkdir -p output/dist_lib
          cp -rf dist/lib output/
          cd output
          mv lib dist_lib
          IOS_LIBS=dist_lib/iphoneos
          SIM_LIBS=dist_lib/iphonesimulator
          
          echo $IOS_LIBS
          echo $SIM_LIBS

          ###### DIST FILES #######
          RECIPE_IOS_LIBS=$RECIPE/$IOS_LIBS
          mkdir -p $RECIPE_IOS_LIBS
          mv -f $IOS_LIBS/lib$RECIPE.a $RECIPE_IOS_LIBS/
          echo transfered $RECIPE_IOS_LIBS
          
          RECIPE_SIM_LIBS=$RECIPE/$SIM_LIBS
          mkdir -p $RECIPE_SIM_LIBS
          mv -f $SIM_LIBS/lib$RECIPE.a $RECIPE_SIM_LIBS/
          echo transfered $RECIPE_SIM_LIBS

        
          

      - name: recipe_dist.zip
        working-directory: output
        run: |
          zip -r dist_lib.zip dist_lib
          rm -rf dist_lib

      - name: move and zip xcframeworks
        working-directory: output/xcframework
        run: |
          for FILE in *; 
              do 
                  #filename="$FILE"
                  #echo $filename
                  zip -r "${FILE%.*}".zip $FILE
                  rm -rf $FILE
              done

      
      - name: update package.swift
        run: |
          SwiftPackageGen \
            ./package.yml \
            311.${{ github.event.inputs.tag }} \
            --output output/Package.swift
      
          
      # uploading "output" folder for the next task to use. (ubuntu machine)
      - uses: actions/upload-artifact@v3
        with:
          name: release-output
          path: ./output

  ###############################################################################
  ###############################################################################
  ###############################################################################
  #moving next part to an ubuntu machine
  create_package:
    name: Release Packages
    runs-on: ubuntu-latest
    needs: [toolchainBuild]


    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/download-artifact@v3
        with:
          name: release-output

      - name: create recipe swift package
        run: |
          RECIPE=${{env.recipe}}
          SOURCES=$RECIPE/Sources
          mkdir -p $SOURCES
          cp -rf package_templates/PythonLibrary $SOURCES/
          cp -f python/Package.swift KivyPythonCore/
          cp -rf package_templates/PythonCore/Sources/PythonCore KivyPythonCore/Sources/

          mv -f python/python_lib KivyPythonCore/Sources/PythonLibrary/lib


      # commit new package to kivypythoncore/master
      - name: commit KivyPythonCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyPythonCore'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyPythonCore'
          user-email: pythonswiftlink@gmail.com
          target-branch: master

      - name: release KivyPythonCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "python/python_dist.zip, python/xcframework/*.zip"
          tag: 3${{ matrix.version }}.${{ github.event.inputs.tag }}
          repo: KivyPythonCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}

      - name: create KivyCore
        run: |
          cp -rf package_templates/KivyCore KivyCore
          cp -f kivy/Package.swift KivyCore/
          

      - name: Download a kivy-ios master as asset for release
        run: |
          git clone https://github.com/kivy/kivy-ios.git
          zip -r kivy-ios.zip kivy-ios
          mv -f kivy-ios.zip kivy/

      # commit new package to kivyswiftlink/master
      - name: commit KivyCore to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyCore'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyCore'
          user-email: pythonswiftlink@gmail.com
          target-branch: master
      
      # create a new release from master and python_lib.zip / dist_lib.zip to the release
      - name: release KivyCore
        uses: ncipollo/release-action@v1
        with:
          artifacts: "kivy/kivy_dist.zip, kivy/site-packages.zip, kivy/kivy-ios.zip, kivy/xcframework/*.zip"
          tag: 3${{ matrix.version }}.${{ github.event.inputs.tag }}
          repo: KivyCore
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}
      
      - name: create KivyNumpy
        run: |
          mkdir -p KivyNumpy/Sources
          touch KivyNumpy/Sources/KivyNumpy.swift
          cp -f numpy/Package.swift KivyNumpy/

      # commit new package to kivyswiftlink/master
      - name: commit KivyNumpy to master
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
        with:
          source-directory: 'KivyNumpy'
          destination-github-username: 'pythonswiftlink'
          destination-repository-name: 'KivyNumpy'
          user-email: pythonswiftlink@gmail.com
          target-branch: master

      # create a new release from master and python_lib.zip / dist_lib.zip to the release
      - name: release KivyNumpy
        uses: ncipollo/release-action@v1
        with:
          artifacts: "numpy/numpy_dist.zip, numpy/numpy-site.zip, numpy/xcframework/*.zip"
          tag: 3${{ matrix.version }}.${{ github.event.inputs.tag }}
          repo: KivyNumpy
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
          makeLatest: ${{ github.event.inputs.lastest }}
 
